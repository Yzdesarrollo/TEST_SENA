@page "/ListadoAseguradoras"
@inject IInsurerServices InsurerServices
@inject NavigationManager nav
@inject IJSRuntime JS
@inject DialogService DialogService

<h3>Listado Aseguradoras</h3>

<div>
    <RadzenButton Icon="group_add" Class="btn btn-sm btn-success m-1" Click=@CreateInsurer Text="Agregar"/>
</div>

<div class="d-flex">
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    PageSize="4" AllowPaging="true" AllowSorting="true" AllowColumnReorder="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    TItem="Insurer" Data="@insurers" ColumnWidth="200px" EmptyText="No hay registros en Base de Datos.">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="Insurer" Property="Id" Sortable="false" Filterable="false" Title="ID" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Name" Sortable="true" Filterable="false" Title="Nombre" />
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Nit" Sortable="true" Filterable="false" Title="NIt" />
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Address" Sortable="true" Filterable="false" Title="Dirección" />
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Phone" Sortable="true" Filterable="false" Title="Teléfono" />
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Email" Sortable="true" Filterable="false" Title="Email">
                <FooterTemplate>
                    Total Aseguradoras: <b>@insurers.Count()</b>
                </FooterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="150px" TItem="Insurer" Property="Id" Sortable="false" Filterable="false" Title="Acciones">
                <Template Context="data">
                    <RadzenButton Icon="edit" Class="btn btn-sm btn-warning m-1" Click=@(() => EditInsurer(data.Id)) Text="Editar"/>
                    <RadzenButton Icon="delete" Class="btn btn-sm btn-danger m-1" Click=@(() => DeleteInsurer(data.Id)) Text="Eliminar"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {

    List<Insurer> insurers = new List<Insurer>();
    IList<Insurer> selectedInsurer;


    protected override async Task OnParametersSetAsync()
    {
        await ReadInsurer();
        //await InvokeAsync(StateHasChanged);
    }

    async Task ReadInsurer() => insurers = await InsurerServices.GetAllInsurers();


    private async Task CreateInsurer()
    {
        var result = await DialogService.OpenAsync("Agregar Aseguradora", ds =>
    @<div>
        <InsurerRegisterComponent />
    </div>
   
    );
      //await InvokeAsync(StateHasChanged);
      await ReadInsurer();
    }


    private async Task EditInsurer(int id)
    {
        var result = await DialogService.OpenAsync("Editar Aseguradora", ds =>
    @<div>
        <InsurerEditComponent Id="@id" />
    </div>
    );
     await ReadInsurer();
    }

    private async Task DeleteInsurer(int id)
    {
        var SelectInsurer = insurers.FirstOrDefault(i => i.Id == id);
        var confirm = await DialogService.Confirm($"Esta seguro que desea eliminar {SelectInsurer.Name}?", "Eliminar Aseguradora", new ConfirmOptions() { OkButtonText = "Eliminar", CancelButtonText = "Cancelar" });

        await InsurerServices.DeleteInsurer(id);
        await ReadInsurer();
    }


}


